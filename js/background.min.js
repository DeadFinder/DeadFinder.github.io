'use strict';
var canvas = document.querySelector(".background-anim");
canvas.width = canvas.clientWidth, canvas.height = canvas.clientHeight;
var elementCloseUpdateLog = document.querySelector(".close-update-log"),
    elementOpenUpdateLog = document.querySelector(".button-log-SOT"),
    modalUpdateLog = document.querySelector(".modal-update-log");
if (elementCloseUpdateLog && elementCloseUpdateLog.addEventListener("click", a => {
        a.preventDefault(), modalUpdateLog.classList.add("hidden")
    }), elementOpenUpdateLog && elementOpenUpdateLog.addEventListener("click", a => {
        a.preventDefault(), modalUpdateLog.classList.remove("hidden")
    }), "/1222/index1.html" == window.location.pathname || "/index1.html" == window.location.pathname) var config = {
    TEXTURE_DOWNSAMPLE: 1,
    DENSITY_DISSIPATION: .98,
    VELOCITY_DISSIPATION: .99,
    PRESSURE_DISSIPATION: .8,
    PRESSURE_ITERATIONS: 25,
    CURL: 30,
    SPLAT_RADIUS: .001
};
else var config = {
    TEXTURE_DOWNSAMPLE: 1,
    DENSITY_DISSIPATION: .98,
    VELOCITY_DISSIPATION: .99,
    PRESSURE_DISSIPATION: .8,
    PRESSURE_ITERATIONS: 25,
    CURL: 30,
    SPLAT_RADIUS: .002
};
var pointers = [],
    splatStack = [],
    _getWebGLContext = getWebGLContext(canvas),
    gl = _getWebGLContext.gl,
    ext = _getWebGLContext.ext,
    support_linear_float = _getWebGLContext.support_linear_float;

function getWebGLContext(a) {
    var b = {
            alpha: !1,
            depth: !1,
            stencil: !1,
            antialias: !1
        },
        c = a.getContext("webgl2", b),
        d = !!c;
    d || (c = a.getContext("webgl", b) || a.getContext("experimental-webgl", b));
    var e = c.getExtension("OES_texture_half_float"),
        f = c.getExtension("OES_texture_half_float_linear");
    d && (c.getExtension("EXT_color_buffer_float"), f = c.getExtension("OES_texture_float_linear")), c.clearColor(0, 0, 0, 1);
    var g = d ? c.RGBA16F : c.RGBA,
        h = d ? c.RG16F : c.RGBA,
        i = d ? c.RG : c.RGBA,
        j = d ? c.HALF_FLOAT : e.HALF_FLOAT_OES;
    return {
        gl: c,
        ext: {
            internalFormat: g,
            internalFormatRG: h,
            formatRG: i,
            texType: j
        },
        support_linear_float: f
    }
}

function pointerPrototype() {
    this.id = -1, this.x = 0, this.y = 0, this.dx = 0, this.dy = 0, this.down = !1, this.moved = !1, this.color = [30, 0, 300]
}
pointers.push(new pointerPrototype);
var GLProgram = function () {
    function a(b, c) {
        if (!(this instanceof a)) throw new TypeError("Cannot call a class as a function");
        if (this.uniforms = {}, this.program = gl.createProgram(), gl.attachShader(this.program, b), gl.attachShader(this.program, c), gl.linkProgram(this.program), !gl.getProgramParameter(this.program, gl.LINK_STATUS)) throw gl.getProgramInfoLog(this.program);
        for (var d, e = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS), f = 0; f < e; f++) d = gl.getActiveUniform(this.program, f).name, this.uniforms[d] = gl.getUniformLocation(this.program, d)
    }
    return a.prototype.bind = function () {
        gl.useProgram(this.program)
    }, a
}();

function compileShader(a, b) {
    var c = gl.createShader(a);
    if (gl.shaderSource(c, b), gl.compileShader(c), !gl.getShaderParameter(c, gl.COMPILE_STATUS)) throw gl.getShaderInfoLog(c);
    return c
}
var baseVertexShader = compileShader(gl.VERTEX_SHADER, "precision highp float; precision mediump sampler2D; attribute vec2 aPosition; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform vec2 texelSize; void main () {     vUv = aPosition * 0.5 + 0.5;     vL = vUv - vec2(texelSize.x, 0.0);     vR = vUv + vec2(texelSize.x, 0.0);     vT = vUv + vec2(0.0, texelSize.y);     vB = vUv - vec2(0.0, texelSize.y);     gl_Position = vec4(aPosition, 0.0, 1.0); }"),
    clearShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; uniform float value; void main () {     gl_FragColor = value * texture2D(uTexture, vUv); }"),
    displayShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; void main () {     gl_FragColor = texture2D(uTexture, vUv); }"),
    splatShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTarget; uniform float aspectRatio; uniform vec3 color; uniform vec2 point; uniform float radius; void main () {     vec2 p = vUv - point.xy;     p.x *= aspectRatio;     vec3 splat = exp(-dot(p, p) / radius) * color;     vec3 base = texture2D(uTarget, vUv).xyz;     gl_FragColor = vec4(base + splat, 1.0); }"),
    advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; vec4 bilerp (in sampler2D sam, in vec2 p) {     vec4 st;     st.xy = floor(p - 0.5) + 0.5;     st.zw = st.xy + 1.0;     vec4 uv = st * texelSize.xyxy;     vec4 a = texture2D(sam, uv.xy);     vec4 b = texture2D(sam, uv.zy);     vec4 c = texture2D(sam, uv.xw);     vec4 d = texture2D(sam, uv.zw);     vec2 f = p - st.xy;     return mix(mix(a, b, f.x), mix(c, d, f.x), f.y); } void main () {     vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;     gl_FragColor = dissipation * bilerp(uSource, coord);     gl_FragColor.a = 1.0; }"),
    advectionShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; void main () {     vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;     gl_FragColor = dissipation * texture2D(uSource, coord); }"),
    divergenceShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; vec2 sampleVelocity (in vec2 uv) {     vec2 multiplier = vec2(1.0, 1.0);     if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }     if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }     if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }     if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }     return multiplier * texture2D(uVelocity, uv).xy; } void main () {     float L = sampleVelocity(vL).x;     float R = sampleVelocity(vR).x;     float T = sampleVelocity(vT).y;     float B = sampleVelocity(vB).y;     float div = 0.5 * (R - L + T - B);     gl_FragColor = vec4(div, 0.0, 0.0, 1.0); }"),
    curlShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; void main () {     float L = texture2D(uVelocity, vL).y;     float R = texture2D(uVelocity, vR).y;     float T = texture2D(uVelocity, vT).x;     float B = texture2D(uVelocity, vB).x;     float vorticity = R - L - T + B;     gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0); }"),
    vorticityShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; uniform sampler2D uCurl; uniform float curl; uniform float dt; void main () {     float L = texture2D(uCurl, vL).y;     float R = texture2D(uCurl, vR).y;     float T = texture2D(uCurl, vT).x;     float B = texture2D(uCurl, vB).x;     float C = texture2D(uCurl, vUv).x;     vec2 force = vec2(abs(T) - abs(B), abs(R) - abs(L));     force *= 1.0 / length(force + 0.00001) * curl * C;     vec2 vel = texture2D(uVelocity, vUv).xy;     gl_FragColor = vec4(vel + force * dt, 0.0, 1.0); }"),
    pressureShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uDivergence; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     float C = texture2D(uPressure, vUv).x;     float divergence = texture2D(uDivergence, vUv).x;     float pressure = (L + R + B + T - divergence) * 0.25;     gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0); }"),
    gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, "precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uVelocity; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     vec2 velocity = texture2D(uVelocity, vUv).xy;     velocity.xy -= vec2(R - L, T - B);     gl_FragColor = vec4(velocity, 0.0, 1.0); }"),
    textureWidth = void 0,
    textureHeight = void 0,
    density = void 0,
    velocity = void 0,
    divergence = void 0,
    curl = void 0,
    pressure = void 0;
initFramebuffers();
var clearProgram = new GLProgram(baseVertexShader, clearShader),
    displayProgram = new GLProgram(baseVertexShader, displayShader),
    splatProgram = new GLProgram(baseVertexShader, splatShader),
    advectionProgram = new GLProgram(baseVertexShader, support_linear_float ? advectionShader : advectionManualFilteringShader),
    divergenceProgram = new GLProgram(baseVertexShader, divergenceShader),
    curlProgram = new GLProgram(baseVertexShader, curlShader),
    vorticityProgram = new GLProgram(baseVertexShader, vorticityShader),
    pressureProgram = new GLProgram(baseVertexShader, pressureShader),
    gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);

function initFramebuffers() {
    textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE, textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;
    var a = ext.internalFormat,
        b = ext.internalFormatRG,
        c = ext.formatRG,
        d = ext.texType;
    density = createDoubleFBO(0, textureWidth, textureHeight, a, gl.RGBA, d, support_linear_float ? gl.LINEAR : gl.NEAREST), velocity = createDoubleFBO(2, textureWidth, textureHeight, b, c, d, support_linear_float ? gl.LINEAR : gl.NEAREST), divergence = createFBO(4, textureWidth, textureHeight, b, c, d, gl.NEAREST), curl = createFBO(5, textureWidth, textureHeight, b, c, d, gl.NEAREST), pressure = createDoubleFBO(6, textureWidth, textureHeight, b, c, d, gl.NEAREST)
}

function createFBO(a, b, c, d, e, f, g) {
    gl.activeTexture(gl.TEXTURE0 + a);
    var h = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, h), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, g), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, g), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE), gl.texImage2D(gl.TEXTURE_2D, 0, d, b, c, 0, e, f, null);
    var i = gl.createFramebuffer();
    return gl.bindFramebuffer(gl.FRAMEBUFFER, i), gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, h, 0), gl.viewport(0, 0, b, c), gl.clear(gl.COLOR_BUFFER_BIT), [h, i, a]
}

function createDoubleFBO(a, b, c, d, e, f, g) {
    var h = createFBO(a, b, c, d, e, f, g),
        i = createFBO(a + 1, b, c, d, e, f, g);
    return {
        get first() {
            return h
        },
        get second() {
            return i
        },
        swap: function () {
            var a = h;
            h = i, i = a
        }
    }
}
var blit = function () {
        return gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer()), gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW), gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer()), gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW), gl.vertexAttribPointer(0, 2, gl.FLOAT, !1, 0, 0), gl.enableVertexAttribArray(0),
            function (a) {
                gl.bindFramebuffer(gl.FRAMEBUFFER, a), gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0)
            }
    }(),
    lastTime = Date.now();
update();

function update() {
    resizeCanvas();
    var a = Math.min((Date.now() - lastTime) / 1e3, .016);
    if (lastTime = Date.now(), gl.viewport(0, 0, textureWidth, textureHeight), 0 < splatStack.length)
        for (var b = 0; b < splatStack.pop(); b++) {
            var c = [10 * Math.random(), 10 * Math.random(), 10 * Math.random()],
                d = canvas.width * Math.random(),
                e = canvas.height * Math.random(),
                f = 1e3 * (Math.random() - .5),
                g = 1e3 * (Math.random() - .5);
            splat(d, e, f, g, c)
        }
    advectionProgram.bind(), gl.uniform2f(advectionProgram.uniforms.texelSize, 1 / textureWidth, 1 / textureHeight), gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]), gl.uniform1i(advectionProgram.uniforms.uSource, velocity.first[2]), gl.uniform1f(advectionProgram.uniforms.dt, a), gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION), blit(velocity.second[1]), velocity.swap(), gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]), gl.uniform1i(advectionProgram.uniforms.uSource, density.first[2]), gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION), blit(density.second[1]), density.swap();
    for (var h, j = 0, k = pointers.length; j < k; j++) h = pointers[j], h.moved && (splat(h.x, h.y, h.dx, h.dy, h.color), h.moved = !1);
    curlProgram.bind(), gl.uniform2f(curlProgram.uniforms.texelSize, 1 / textureWidth, 1 / textureHeight), gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.first[2]), blit(curl[1]), vorticityProgram.bind(), gl.uniform2f(vorticityProgram.uniforms.texelSize, 1 / textureWidth, 1 / textureHeight), gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.first[2]), gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]), gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL), gl.uniform1f(vorticityProgram.uniforms.dt, a), blit(velocity.second[1]), velocity.swap(), divergenceProgram.bind(), gl.uniform2f(divergenceProgram.uniforms.texelSize, 1 / textureWidth, 1 / textureHeight), gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.first[2]), blit(divergence[1]), clearProgram.bind();
    var l = pressure.first[2];
    gl.activeTexture(gl.TEXTURE0 + l), gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]), gl.uniform1i(clearProgram.uniforms.uTexture, l), gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION), blit(pressure.second[1]), pressure.swap(), pressureProgram.bind(), gl.uniform2f(pressureProgram.uniforms.texelSize, 1 / textureWidth, 1 / textureHeight), gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]), l = pressure.first[2], gl.activeTexture(gl.TEXTURE0 + l);
    for (var n = 0; n < config.PRESSURE_ITERATIONS; n++) gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]), gl.uniform1i(pressureProgram.uniforms.uPressure, l), blit(pressure.second[1]), pressure.swap();
    gradienSubtractProgram.bind(), gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1 / textureWidth, 1 / textureHeight), gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.first[2]), gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.first[2]), blit(velocity.second[1]), velocity.swap(), gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight), displayProgram.bind(), gl.uniform1i(displayProgram.uniforms.uTexture, density.first[2]), blit(null), requestAnimationFrame(update)
}

function splat(a, b, c, d, e) {
    splatProgram.bind(), gl.uniform1i(splatProgram.uniforms.uTarget, velocity.first[2]), gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height), gl.uniform2f(splatProgram.uniforms.point, a / canvas.width, 1 - b / canvas.height), gl.uniform3f(splatProgram.uniforms.color, c, -d, 1), gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS), blit(velocity.second[1]), velocity.swap(), gl.uniform1i(splatProgram.uniforms.uTarget, density.first[2]), gl.uniform3f(splatProgram.uniforms.color, .3 * e[0], .3 * e[1], .3 * e[2]), blit(density.second[1]), density.swap()
}

function resizeCanvas() {
    (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) && (canvas.width = canvas.clientWidth, canvas.height = canvas.clientHeight, initFramebuffers())
}
var count = 0,
    colorArr = [Math.random() + .2, Math.random() + .2, Math.random() + .2];
if (document.addEventListener("mousemove", function (a) {
        count++, 25 < count && (colorArr = [Math.random() + .2, Math.random() + .2, Math.random() + .2], count = 0), pointers[0].down = !0, pointers[0].color = colorArr, pointers[0].moved = pointers[0].down, pointers[0].dx = 10 * (a.pageX - pointers[0].x), pointers[0].dy = 10 * (a.pageY - pointers[0].y), pointers[0].x = a.pageX, pointers[0].y = a.pageY, "/1222/index1.html" == window.location.pathname || "/index1.html" == window.location.pathname ? 0 < a.pageY && 200 > a.pageY && (a.pageX > window.innerWidth / 2 - 300 && a.pageX < window.innerWidth / 2 - 100 ? pointers[0].color = [.05, .05, .05] : a.pageX > window.innerWidth / 2 - 100 && a.pageX < window.innerWidth / 2 + 100 ? pointers[0].color = [.05, .05, .05] : a.pageX > window.innerWidth / 2 + 100 && a.pageX < window.innerWidth / 2 + 300 && (pointers[0].color = [.05, .05, .05])) : a.pageY > window.innerHeight / 2 + 270 && a.pageY < window.innerHeight / 2 + 360 && a.pageX > window.innerWidth / 2 - 80 && a.pageX < window.innerWidth / 2 + 80 && (pointers[0].color = [.05, .05, .05])
    }), window.onkeydown = function (a) {
        if (123 == a.keyCode || 85 == a.keyCode || 17 == a.keyCode || 16 == a.keyCode || 74 == a.keyCode || 73 == a.keyCode) return !1
    }, window.onkeypress = function (a) {
        if (123 == a.keyCode || 85 == a.keyCode || 17 == a.keyCode || 16 == a.keyCode || 74 == a.keyCode || 73 == a.keyCode) return !1
    }, "/1222/index1.html" == window.location.pathname || "/index1.html" == window.location.pathname) {
    function a() {
        m = document.getElementById("container"), n = new THREE.Camera, n.position.z = 1, o = new THREE.Scene;
        var a = new THREE.PlaneBufferGeometry(2, 2);
        q = {
            u_time: {
                type: "f",
                value: -10009.5
            },
            u_resolution: {
                type: "v2",
                value: new THREE.Vector2
            },
            u_mouse: {
                type: "v2",
                value: new THREE.Vector2
            },
            u_noise: {
                type: "t",
                value: r
            },
            u_mousemoved: {
                type: "b",
                value: !1
            }
        };
        var b = new THREE.ShaderMaterial({
                uniforms: q,
                vertexShader: document.getElementById("vertexShader").textContent,
                fragmentShader: document.getElementById("fragmentShader").textContent
            }),
            c = new THREE.Mesh(a, b);
        o.add(c), p = new THREE.WebGLRenderer({
            alpha: !0
        }), p.setPixelRatio(1), m.appendChild(p.domElement), d(), document.addEventListener("pointermove", a => {
            a.preventDefault(), p_move1 && (q.u_mouse.value.x = 0, q.u_mouse.value.y = 0, q.u_mousemoved.value = !1, p_move1 = !1), a.pageX > window.innerWidth / 2 - 300 && a.pageX < window.innerWidth / 2 - 100 && 0 < a.pageY && 200 > a.pageY && (q.u_mouse.value.x = (a.pageX - (window.innerWidth / 2 - 200)) / 100, q.u_mouse.value.y = -1 * ((a.pageY - 100) / 100), q.u_mousemoved.value = !0, p_move1 = !0)
        })
    }

    function b() {
        t = document.getElementById("container2"), v = new THREE.Camera, v.position.z = 1, w = new THREE.Scene;
        var a = new THREE.PlaneBufferGeometry(2, 2);
        u = {
            u_time: {
                type: "f",
                value: -10009.5
            },
            u_resolution: {
                type: "v2",
                value: new THREE.Vector2
            },
            u_mouse: {
                type: "v2",
                value: new THREE.Vector2
            },
            u_noise: {
                type: "t",
                value: y
            },
            u_mousemoved: {
                type: "b",
                value: !1
            }
        };
        var b = new THREE.ShaderMaterial({
                uniforms: u,
                vertexShader: document.getElementById("vertexShader").textContent,
                fragmentShader: document.getElementById("fragmentShader").textContent
            }),
            c = new THREE.Mesh(a, b);
        w.add(c), x = new THREE.WebGLRenderer({
            alpha: !0
        }), x.setPixelRatio(1), t.appendChild(x.domElement), e(), document.addEventListener("pointermove", a => {
            a.preventDefault(), p_move2 && (u.u_mouse.value.x = 0, u.u_mouse.value.y = 0, q.u_mousemoved.value = !1, p_move2 = !1), a.pageX > window.innerWidth / 2 - 100 && a.pageX < window.innerWidth / 2 + 100 && 0 < a.pageY && 200 > a.pageY && (u.u_mouse.value.x = (a.pageX - window.innerWidth / 2) / 100, u.u_mouse.value.y = -1 * ((a.pageY - 100) / 100), u.u_mousemoved.value = !0, p_move2 = !0)
        })
    }

    function c() {
        A = document.getElementById("container3"), C = new THREE.Camera, C.position.z = 1, D = new THREE.Scene;
        var a = new THREE.PlaneBufferGeometry(2, 2);
        B = {
            u_time: {
                type: "f",
                value: -10009.5
            },
            u_resolution: {
                type: "v2",
                value: new THREE.Vector2
            },
            u_mouse: {
                type: "v2",
                value: new THREE.Vector2
            },
            u_noise: {
                type: "t",
                value: F
            },
            u_mousemoved: {
                type: "b",
                value: !1
            }
        };
        var b = new THREE.ShaderMaterial({
                uniforms: B,
                vertexShader: document.getElementById("vertexShader").textContent,
                fragmentShader: document.getElementById("fragmentShader").textContent
            }),
            c = new THREE.Mesh(a, b);
        D.add(c), E = new THREE.WebGLRenderer({
            alpha: !0
        }), E.setPixelRatio(1), A.appendChild(E.domElement), f(), document.addEventListener("pointermove", a => {
            a.preventDefault(), p_move3 && (B.u_mouse.value.x = 0, B.u_mouse.value.y = 0, q.u_mousemoved.value = !1, p_move3 = !1), a.pageX > window.innerWidth / 2 + 100 && a.pageX < window.innerWidth / 2 + 300 && 0 < a.pageY && 200 > a.pageY && (B.u_mouse.value.x = (a.pageX - (window.innerWidth / 2 + 200)) / 100, B.u_mouse.value.y = -1 * ((a.pageY - 100) / 100), B.u_mousemoved.value = !0, p_move3 = !0)
        })
    }

    function d() {
        p.setSize(200, 200), q.u_resolution.value.x = p.domElement.width, q.u_resolution.value.y = p.domElement.height
    }

    function e() {
        x.setSize(200, 200), u.u_resolution.value.x = x.domElement.width, u.u_resolution.value.y = x.domElement.height
    }

    function f() {
        E.setSize(200, 200), B.u_resolution.value.x = E.domElement.width, B.u_resolution.value.y = E.domElement.height
    }

    function g() {
        requestAnimationFrame(g), j()
    }

    function h() {
        requestAnimationFrame(h), k()
    }

    function i() {
        requestAnimationFrame(i), l()
    }

    function j() {
        q.u_time.value += .01, q.u_time.value %= 1e6, p.render(o, n)
    }

    function k() {
        u.u_time.value += .01, u.u_time.value %= 1e6, x.render(w, v)
    }

    function l() {
        B.u_time.value += .01, B.u_time.value %= 1e6, E.render(D, C)
    }
    let m, n, o, p, q, r, s = new THREE.TextureLoader;
    s.setCrossOrigin("anonymous"), s.load("https://s3-us-west-2.amazonaws.com/s.cdpn.io/982762/noise.png", function (b) {
        r = b, r.wrapS = THREE.RepeatWrapping, r.wrapT = THREE.RepeatWrapping, r.minFilter = THREE.LinearFilter, a(), g()
    });
    let t, u, v, w, x, y, z = new THREE.TextureLoader;
    z.load("https://s3-us-west-2.amazonaws.com/s.cdpn.io/982762/noise.png", function (a) {
        y = a, y.wrapS = THREE.RepeatWrapping, y.wrapT = THREE.RepeatWrapping, y.minFilter = THREE.LinearFilter, b(), h()
    });
    let A, B, C, D, E, F, G = new THREE.TextureLoader;
    G.load("https://s3-us-west-2.amazonaws.com/s.cdpn.io/982762/noise.png", function (a) {
        F = a, F.wrapS = THREE.RepeatWrapping, F.wrapT = THREE.RepeatWrapping, F.minFilter = THREE.LinearFilter, c(), i()
    });
    var p_move1 = !1,
        p_move2 = !1,
        p_move3 = !1
}
